---
##############
#   INFRA    #
##############
- name: PROVISION COCKROACHDB CLUSTER
  hosts: localhost
  connection: local
  gather_facts: no
  become: no
  tags:
    - infra
    - cloud_instance
    - cockroachdb
  tasks:
    - name: ensure presence of new cluster
      fabiog1901.cockroachdb.cloud_instance:
        state: "{{ state }}"
        deployment_id: "{{ deployment_id }}"
        deployment: "{{ deployment_crdb }}"
        defaults:
          instances:
            aws:
              "0":
                "0":
                  "0": m6i.4xlarge
                "1":
                  "0": t2.small
                  "1": t2.micro
                  "2": t2.small
                  high_cpu: t2.micro
                  high_mem: t2.small
                  "0.5": t2.nano
                "2":
                  "0": m6i.large
                  "1": t3.micro
                  "2": t3.small
                  "4": c5.large
                  "8": m6i.large
                  "16": r5.large
                  high_cpu: c5.large
                  high_mem: r5.large
                "4":
                  "0": m6i.xlarge
                  "8": c5.xlarge
                  "16": m6i.xlarge
                  "32": r5.xlarge
                  high_cpu: c5.xlarge
                  high_mem: r5.xlarge
                "8":
                  "0": m6i.2xlarge
                  "16": c5.2xlarge
                  "32": m6i.2xlarge
                  "64": r5.2xlarge
                  high_cpu: c5.2xlarge
                  high_mem: r5.2xlarge
                "16":
                  "0": m6i.4xlarge
                  "32": c5.4xlarge
                  "64": m6i.4xlarge
                  "128": r5.4xlarge
                  high_cpu: c5.4xlarge
                  high_mem: r5.4xlarge
                "32":
                  "0": m6i.8xlarge
                  "128": m6i.8xlarge
                  "256": r5.8xlarge
                  high_cpu: c5.9xlarge
                  high_mem: r5.8xlarge
              "1":
                "0":
                  "0": p3.2xlarge
                "8":
                  "0": p3.2xlarge
              "4":
                "0":
                  "0": p3.8xlarge
                "32":
                  "0": p3.8xlarge
            azure:
              "0":
                "0":
                  "0": Standard_D16s_v3
                "1":
                  "1": Standard_B1s
                  "2": Standard_B1ms
                  high_cpu: Standard_B1ls
                  default: Standard_B1ms
                  high_mem: Standard_B1ms
                  "0.5": Standard_B1ls
                "2":
                  "4": Standard_F2s_v2
                  "8": Standard_D2s_v3
                  "16": Standard_E2s_v3
                  high_cpu: Standard_F2s_v2
                  "0": Standard_D2s_v3
                  high_mem: Standard_E2s_v3
                "4":
                  "8": Standard_F4s_v2
                  "16": Standard_D4s_v3
                  "32": Standard_E4s_v3
                  high_cpu: Standard_F4s_v2
                  "0": Standard_D4s_v3
                  high_mem: Standard_E4s_v3
                "8":
                  "16": Standard_F8s_v2
                  "32": Standard_D8s_v3
                  "64": Standard_E8s_v3
                  high_cpu: Standard_F8s_v2
                  "0": Standard_D8s_v3
                  high_mem: Standard_E8s_v3
                "16":
                  "32": Standard_F16s_v2
                  "64": Standard_D16s_v3
                  "128": Standard_E16s_v3
                  high_cpu: Standard_F16s_v2
                  "0": Standard_D16s_v3
                  high_mem: Standard_E16s_v3
                "32":
                  "64": Standard_F32s_v2
                  "128": Standard_D32s_v3
                  "256": Standard_E32s_v3
                  high_cpu: Standard_F32s_v2
                  "0": Standard_D32s_v3
                  high_mem: Standard_E32s_v3
              "1":
                "0": Standard_NC6
                "6":
                  "0": Standard_NC6
              "4":
                "0": Standard_NC24r
                "24":
                  "0": Standard_NC24r
            gcp:
              "0":
                "0":
                  "0": n2-standard-16
                "1":
                  "0": g1-small
                  "1": f1-micro
                  "2": g1-small
                  high_cpu: g1-small
                  high_mem: g1-small
                "2":
                  "0": n2-standard-2
                  "2": n2-highcpu-2
                  "4": n2-standard-2
                  "8": n2-standard-2
                  "16": n2-highmem-2
                  high_cpu: n2-highcpu-2
                  high_mem: n2-highmem-2
                "4":
                  "0": n2-standard-4
                  "4": n2-highcpu-4
                  "8": n2-standard-4
                  "16": n2-standard-4
                  "32": n2-highmem-4
                  high_cpu: n2-highcpu-4
                  high_mem: n2-highmem-4
                "8":
                  "0": n2-standard-8
                  "8": n2-highcpu-8
                  "16": n2-standard-8
                  "32": n2-standard-8
                  "64": n2-highmem-8
                  high_cpu: n2-highcpu-8
                  high_mem: n2-highmem-8
                "16":
                  "0": n2-standard-16
                  "16": n2-highcpu-16
                  "32": n2-standard-16
                  "64": n2-standard-16
                  "128": n2-highmem-16
                  high_cpu: n2-highcpu-16
                  high_mem: n2-highmem-16
                "32":
                  "0": n2-standard-32
                  "32": n2-highcpu-32
                  "64": n2-standard-32
                  "128": n2-standard-32
                  "256": n2-highmem-32
                  high_cpu: n2-highcpu-32
                  high_mem: n2-highmem-32
      register: instances

      # substitute 'meta: end_playbook' with 'fail:' as this is a custom tweak
    - name: quit if state is absent
      meta: end_playbook
      when: state == 'absent'

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 180
        sleep: 5
        state: started
      loop: "{{ instances.out }}"

    - name: add instances to inventory groups
      ansible.builtin.add_host:
        # id
        name: "{{ item.private_hostname }}"
        id: "{{ item.id }}"

        # locality
        cloud: "{{ item.cloud }}"
        region: "{{ item.region }}"
        zone: "{{ item.zone }}"

        # addresses
        public_hostname: "{{ item.public_hostname }}"
        public_ip: "{{ item.public_ip }}"
        private_hostname: "{{ item.private_hostname }}"
        private_ip: "{{ item.private_ip }}"

        # tags
        ansible_user: "{{ item.ansible_user }}"
        ansible_host: "{{ item.public_ip }}"
        ansible_become: true # ugly
        groups: "{{ item.inventory_groups }}"
        cluster_name: "{{ item.cluster_name }}"
        group_name: "{{ item.group_name }}"
        extra_vars: "{{ item.extra_vars }}"
      loop: "{{ instances.out }}"

    - name: add extra_vars as hostvars variables
      ansible.builtin.add_host: '{{ {"name": item.private_hostname} | combine(item.extra_vars) }}'
      loop: "{{ instances.out }}"

    - name: save cluster list of hosts
      ansible.builtin.copy:
        content: |
          {% for item in groups %}
          {% if item not in ['all', 'ungrouped'] %}
          [{{item}}]
          {% for entry in groups[item] %}
          {{ entry }} ansible_host={{ hostvars[entry].ansible_host }} cloud={{ hostvars[entry].cloud }} cluster_name={{ hostvars[entry].cluster_name }}  group_name={{ hostvars[entry].group_name }} id={{ hostvars[entry].id }} region={{ hostvars[entry].region }} zone={{ hostvars[entry].zone }} private_hostname={{ hostvars[entry].private_hostname }} private_ip={{ hostvars[entry].private_ip }} public_hostname={{ hostvars[entry].public_hostname }} public_ip={{ hostvars[entry].public_ip }} ansible_user={{ hostvars[entry].ansible_user }} extra_vars="{{ hostvars[entry].extra_vars }}"
          {% endfor %}

          {% endif %}
          {% endfor %}
        dest: "{{ deployment_id }}.ini"

    - name: save simplified list of hosts
      ansible.builtin.copy:
        content: |
          {% for item in groups %}
          {% if item not in ['all', 'ungrouped'] %}
          [{{item}}]
          {% for entry in groups[item] %}
          {{ entry }} ==> {{ hostvars[entry].public_ip }} {{ hostvars[entry].cloud }} {{ hostvars[entry].region }}
          {% endfor %}

          {% endif %}
          {% endfor %}
        dest: "{{ deployment_id }}.simple.ini"

##############
#  PLATFORM  #
##############
- name: GENERATE COCKROACHDB CERTS
  hosts: localhost
  gather_facts: yes
  become: no
  tags:
    - platform
    - certificates
    - cockroachdb
  tasks:
    - include_role:
        name: fabiog1901.cockroachdb.certificates
      when: cockroachdb_secure | default(no)

- name: DEPLOY COCKROACHDB
  hosts: cockroachdb
  gather_facts: yes
  become: yes
  serial: "{{ (cockroachdb_deployment|default('standard') == 'upgrade') | ternary(1, '100%') }}"
  tags:
    - platform
    - cockroachdb
  tasks:
    - include_role:
        name: fabiog1901.cockroachdb.config_os

    - include_role:
        name: fabiog1901.cockroachdb.cockroachdb
      vars:
        cockroachdb_deployment_type: "{{ cockroachdb_deployment | default('standard') }}"

- name: INSTALL COCKROACHDB-HAPROXY
  hosts: haproxy
  gather_facts: yes
  become: yes
  tags:
    - platform
    - haproxy
    - cockroachdb
  tasks:
    - name: install HAProxy
      include_role:
        name: fabiog1901.cockroachdb.haproxy
      vars:
        haproxy_group: "{{ groups[cluster_name] | intersect(groups['cockroachdb']) }}"
        haproxy_port: "{{ cockroachdb_port | default('26257') }}"
        haproxy_checkport: "{{ cockroachdb_http_addr_port | default('8080') }}"
        haproxy_serverprefix: cockroach
        haproxy_httpchk: "/health?ready=1"

    - name: install the cockroach SQL client
      include_role:
        name: fabiog1901.cockroachdb.cockroachdb
      vars:
        cockroachdb_deployment_type: install only

#################
#  APPLICATION  #
#################

- name: COPY CRT+KEY TO APP SERVERS
  hosts: app
  gather_facts: no
  become: yes
  tags:
    - app
    - cockroachdb
  tasks:
    - name: install cockroachdb sql client
      include_role:
        name: fabiog1901.cockroachdb.cockroachdb
      vars:
        cockroachdb_deployment_type: install only

    - name: Copy client key
      ansible.builtin.copy:
        src: "certs/certs/client.{{ item.name }}.key"
        dest: "client.{{ item.name }}.key"
        mode: "0400"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: cockroachdb_secure and item.is_cert
      loop: "{{ dbusers }}"

    - name: Copy client cert
      ansible.builtin.copy:
        src: certs/certs/client.{{ item.name }}.crt
        dest: "client.{{ item.name }}.crt"
        mode: "0644"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: cockroachdb_secure and item.is_cert
      loop: "{{ dbusers }}"

    - name: Copy ca.crt
      ansible.builtin.copy:
        src: certs/certs/ca.crt
        dest: "ca.crt"
        mode: "0644"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: cockroachdb_secure

- name: SETUP SCHEMA AND SEED DATABASE
  hosts: cockroachdb
  gather_facts: no
  become: yes
  tags:
    - dataload
    - cockroachdb
  tasks:
    - name: prepare sql script
      ansible.builtin.copy:
        src: libs/.s.sql
        dest: s.sql
        mode: "0644"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: run sql script
      run_once: yes
      shell: |
        cockroach sql \
          {{ (cockroachdb_secure) | ternary('--certs-dir=/var/lib/cockroach/certs', '--insecure') }} \
          --host={{ cockroachdb_advertise_addr }} < s.sql
      register: out

    - name: check status of job - 4 hours timeout
      run_once: yes
      shell: |
        cockroach sql \
          {{ (cockroachdb_secure) | ternary('--certs-dir=/var/lib/cockroach/certs', '--insecure') }} \
          --host={{ cockroachdb_advertise_addr }} \
          -e "select status from crdb_internal.jobs where job_id = '{{ out.stdout_lines[-1] }}';"
      register: out1
      until: out1.stdout_lines[-1] in ['failed', 'succeeded']
      retries: 480 # 4h / 30
      delay: 30

    - name: fail on failed import if not due to key collision
      run_once: yes
      shell: |
        cockroach sql \
          {{ (cockroachdb_secure) | ternary('--certs-dir=/var/lib/cockroach/certs', '--insecure') }} \
          --host={{ cockroachdb_advertise_addr }} \
          -e "select error from crdb_internal.jobs where job_id = '{{ out.stdout_lines[-1] }}';"
      register: out2
      when: out1.stdout_lines[-1] == 'failed'
      failed_when: '"key collision" not in out.stdout'
